/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Regex, RegexInterface } from "../Regex";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "count",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "matches",
    outputs: [
      {
        name: "accepts",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "find",
    outputs: [
      {
        name: "begin",
        type: "uint256",
      },
      {
        name: "end",
        type: "uint256",
      },
      {
        name: "accepts",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_address",
        type: "address",
      },
    ],
    name: "setUtilAddress",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "utilAddress",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "tokenize",
    outputs: [
      {
        name: "",
        type: "string[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "_utilAddress",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051602080610f1e833981018060405261002f9190810190610089565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100d2565b600061008182516100b2565b905092915050565b60006020828403121561009b57600080fd5b60006100a984828501610075565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610e3d806100e16000396000f300608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dc641e61461007d57806332ac752b146100ba57806382b7b500146100f75780638431f1a9146101365780639604ad461461015f578063ddcf46ba1461018a575b600080fd5b34801561008957600080fd5b506100a4600480360361009f91908101906108da565b6101c7565b6040516100b19190610c5e565b60405180910390f35b3480156100c657600080fd5b506100e160048036036100dc91908101906108da565b6102f7565b6040516100ee9190610b91565b60405180910390f35b34801561010357600080fd5b5061011e600480360361011991908101906108da565b6103a3565b60405161012d93929190610c79565b60405180910390f35b34801561014257600080fd5b5061015d60048036036101589190810190610888565b610458565b005b34801561016b57600080fd5b5061017461049b565b6040516101819190610b54565b60405180910390f35b34801561019657600080fd5b506101b160048036036101ac91908101906108da565b6104c0565b6040516101be9190610b6f565b60405180910390f35b60008060008060008060019450600093505b6001156102ea576101e9876103a3565b80975081945082955050505084156102e05783806001019450506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166325ff7a9888846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161027e929190610bf0565b600060405180830381600087803b15801561029857600080fd5b505af11580156102ac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506102d5919081019061095c565b9050809750506102e5565b6102ea565b6101d9565b8395505050505050919050565b600073__contracts/generated/QueryRegex.sol:Q__6332ac752b836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161034c9190610bce565b60206040518083038186803b15801561036457600080fd5b505af4158015610378573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061039c91908101906108b1565b9050919050565b600080600073__contracts/FindLibrary.sol:FindLibrar__6382b7b500856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103fb9190610bce565b60606040518083038186803b15801561041357600080fd5b505af4158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061044b91908101906109c8565b9250925092509193909250565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000806000606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650600195506105aa8773ffffffffffffffffffffffffffffffffffffffff166357c82cc18b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161054e9190610bac565b600060405180830381600087803b15801561056857600080fd5b505af115801561057c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506105a5919081019061091b565b6101c7565b9450846040519080825280602002602001820160405280156105e057816020015b60608152602001906001900390816105cb5790505b509350600092505b84831015610791576105f9896103a3565b8098508193508294505050508673ffffffffffffffffffffffffffffffffffffffff16631dcd9b558a84846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161065e93929190610c20565b600060405180830381600087803b15801561067857600080fd5b505af115801561068c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506106b5919081019061091b565b84848151811015156106c357fe5b906020019060200201819052508673ffffffffffffffffffffffffffffffffffffffff166325ff7a988a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610727929190610bf0565b600060405180830381600087803b15801561074157600080fd5b505af1158015610755573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061077e919081019061095c565b90508099505082806001019350506105e8565b83975050505050505050919050565b60006107ac8235610d7a565b905092915050565b60006107c08251610d9a565b905092915050565b600082601f83011215156107db57600080fd5b81356107ee6107e982610cdd565b610cb0565b9150808252602083016020830185838301111561080a57600080fd5b610815838284610db0565b50505092915050565b600082601f830112151561083157600080fd5b815161084461083f82610cdd565b610cb0565b9150808252602083016020830185838301111561086057600080fd5b61086b838284610dbf565b50505092915050565b60006108808251610da6565b905092915050565b60006020828403121561089a57600080fd5b60006108a8848285016107a0565b91505092915050565b6000602082840312156108c357600080fd5b60006108d1848285016107b4565b91505092915050565b6000602082840312156108ec57600080fd5b600082013567ffffffffffffffff81111561090657600080fd5b610912848285016107c8565b91505092915050565b60006020828403121561092d57600080fd5b600082015167ffffffffffffffff81111561094757600080fd5b6109538482850161081e565b91505092915050565b6000806040838503121561096f57600080fd5b600083015167ffffffffffffffff81111561098957600080fd5b6109958582860161081e565b925050602083015167ffffffffffffffff8111156109b257600080fd5b6109be8582860161081e565b9150509250929050565b6000806000606084860312156109dd57600080fd5b60006109eb86828701610874565b93505060206109fc86828701610874565b9250506040610a0d868287016107b4565b9150509250925092565b610a2081610d44565b82525050565b6000610a3182610d16565b80845260208401935083602082028501610a4a85610d09565b60005b84811015610a83578383038852610a65838351610b0f565b9250610a7082610d37565b9150602088019750600181019050610a4d565b508196508694505050505092915050565b610a9d81610d64565b82525050565b6000610aae82610d2c565b808452610ac2816020860160208601610dbf565b610acb81610df2565b602085010191505092915050565b6000610ae482610d2c565b808452610af8816020860160208601610dbf565b610b0181610df2565b602085010191505092915050565b6000610b1a82610d21565b808452610b2e816020860160208601610dbf565b610b3781610df2565b602085010191505092915050565b610b4e81610d70565b82525050565b6000602082019050610b696000830184610a17565b92915050565b60006020820190508181036000830152610b898184610a26565b905092915050565b6000602082019050610ba66000830184610a94565b92915050565b60006020820190508181036000830152610bc68184610aa3565b905092915050565b60006020820190508181036000830152610be88184610ad9565b905092915050565b60006040820190508181036000830152610c0a8185610aa3565b9050610c196020830184610b45565b9392505050565b60006060820190508181036000830152610c3a8186610aa3565b9050610c496020830185610b45565b610c566040830184610b45565b949350505050565b6000602082019050610c736000830184610b45565b92915050565b6000606082019050610c8e6000830186610b45565b610c9b6020830185610b45565b610ca86040830184610a94565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715610cd357600080fd5b8060405250919050565b600067ffffffffffffffff821115610cf457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610ddd578082015181840152602081019050610dc2565b83811115610dec576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058208c02db3acc0ec4ec53a5fa6401ca42ab987fb45e0ad718b8a7e8dcb0f5a2fe2c6c6578706572696d656e74616cf50037";

type RegexConstructorParams =
  | [linkLibraryAddresses: RegexLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Regex__factory extends ContractFactory {
  constructor(...args: RegexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Regex__factory.linkBytecode(linkLibraryAddresses), signer);
    }
    this.contractName = "Regex";
  }

  static linkBytecode(linkLibraryAddresses: RegexLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__contracts/generated/QueryRegex\\.sol:Q__", "g"),
      linkLibraryAddresses["__contracts/generated/QueryRegex.sol:Q__"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__contracts/FindLibrary\\.sol:FindLibrar__", "g"),
      linkLibraryAddresses["__contracts/FindLibrary.sol:FindLibrar__"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    _utilAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Regex> {
    return super.deploy(_utilAddress, overrides || {}) as Promise<Regex>;
  }
  getDeployTransaction(
    _utilAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_utilAddress, overrides || {});
  }
  attach(address: string): Regex {
    return super.attach(address) as Regex;
  }
  connect(signer: Signer): Regex__factory {
    return super.connect(signer) as Regex__factory;
  }
  static readonly contractName: "Regex";
  public readonly contractName: "Regex";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegexInterface {
    return new utils.Interface(_abi) as RegexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Regex {
    return new Contract(address, _abi, signerOrProvider) as Regex;
  }
}

export interface RegexLibraryAddresses {
  ["__contracts/generated/QueryRegex.sol:Q__"]: string;
  ["__contracts/FindLibrary.sol:FindLibrar__"]: string;
}
