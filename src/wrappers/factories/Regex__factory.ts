/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Regex, RegexInterface } from "../Regex";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "count",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "matches",
    outputs: [
      {
        name: "accepts",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "find",
    outputs: [
      {
        name: "begin",
        type: "uint256",
      },
      {
        name: "end",
        type: "uint256",
      },
      {
        name: "accepts",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "pure",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_address",
        type: "address",
      },
    ],
    name: "setUtilAddress",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "utilAddress",
    outputs: [
      {
        name: "",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "testtttt",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "input",
        type: "string",
      },
    ],
    name: "tokenize",
    outputs: [
      {
        name: "",
        type: "string[]",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "_utilAddress",
        type: "address",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051602080610f5d833981018060405261002f9190810190610089565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100d2565b600061008182516100b2565b905092915050565b60006020828403121561009b57600080fd5b60006100a984828501610075565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610e7c806100e16000396000f300608060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630dc641e61461008857806332ac752b146100c557806382b7b500146101025780638431f1a9146101415780639604ad461461016a578063d9ab247214610195578063ddcf46ba146101c0575b600080fd5b34801561009457600080fd5b506100af60048036036100aa9190810190610919565b6101fd565b6040516100bc9190610c9d565b60405180910390f35b3480156100d157600080fd5b506100ec60048036036100e79190810190610919565b61032d565b6040516100f99190610bd0565b60405180910390f35b34801561010e57600080fd5b5061012960048036036101249190810190610919565b6103d9565b60405161013893929190610cb8565b60405180910390f35b34801561014d57600080fd5b50610168600480360361016391908101906108c7565b61048e565b005b34801561017657600080fd5b5061017f6104d1565b60405161018c9190610b93565b60405180910390f35b3480156101a157600080fd5b506101aa6104f6565b6040516101b79190610c9d565b60405180910390f35b3480156101cc57600080fd5b506101e760048036036101e29190810190610919565b6104ff565b6040516101f49190610bae565b60405180910390f35b60008060008060008060019450600093505b6001156103205761021f876103d9565b80975081945082955050505084156103165783806001019450506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166325ff7a9888846040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102b4929190610c2f565b600060405180830381600087803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061030b919081019061099b565b90508097505061031b565b610320565b61020f565b8395505050505050919050565b600073__contracts/generated/QueryRegex.sol:Q__6332ac752b836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103829190610c0d565b60206040518083038186803b15801561039a57600080fd5b505af41580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103d291908101906108f0565b9050919050565b600080600073__contracts/FindLibrary.sol:FindLibrar__6382b7b500856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104319190610c0d565b60606040518083038186803b15801561044957600080fd5b505af415801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104819190810190610a07565b9250925092509193909250565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006004905090565b60606000806000606060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169650600195506105e98773ffffffffffffffffffffffffffffffffffffffff166357c82cc18b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161058d9190610beb565b600060405180830381600087803b1580156105a757600080fd5b505af11580156105bb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506105e4919081019061095a565b6101fd565b94508460405190808252806020026020018201604052801561061f57816020015b606081526020019060019003908161060a5790505b509350600092505b848310156107d057610638896103d9565b8098508193508294505050508673ffffffffffffffffffffffffffffffffffffffff16631dcd9b558a84846040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161069d93929190610c5f565b600060405180830381600087803b1580156106b757600080fd5b505af11580156106cb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506106f4919081019061095a565b848481518110151561070257fe5b906020019060200201819052508673ffffffffffffffffffffffffffffffffffffffff166325ff7a988a836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610766929190610c2f565b600060405180830381600087803b15801561078057600080fd5b505af1158015610794573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506107bd919081019061099b565b9050809950508280600101935050610627565b83975050505050505050919050565b60006107eb8235610db9565b905092915050565b60006107ff8251610dd9565b905092915050565b600082601f830112151561081a57600080fd5b813561082d61082882610d1c565b610cef565b9150808252602083016020830185838301111561084957600080fd5b610854838284610def565b50505092915050565b600082601f830112151561087057600080fd5b815161088361087e82610d1c565b610cef565b9150808252602083016020830185838301111561089f57600080fd5b6108aa838284610dfe565b50505092915050565b60006108bf8251610de5565b905092915050565b6000602082840312156108d957600080fd5b60006108e7848285016107df565b91505092915050565b60006020828403121561090257600080fd5b6000610910848285016107f3565b91505092915050565b60006020828403121561092b57600080fd5b600082013567ffffffffffffffff81111561094557600080fd5b61095184828501610807565b91505092915050565b60006020828403121561096c57600080fd5b600082015167ffffffffffffffff81111561098657600080fd5b6109928482850161085d565b91505092915050565b600080604083850312156109ae57600080fd5b600083015167ffffffffffffffff8111156109c857600080fd5b6109d48582860161085d565b925050602083015167ffffffffffffffff8111156109f157600080fd5b6109fd8582860161085d565b9150509250929050565b600080600060608486031215610a1c57600080fd5b6000610a2a868287016108b3565b9350506020610a3b868287016108b3565b9250506040610a4c868287016107f3565b9150509250925092565b610a5f81610d83565b82525050565b6000610a7082610d55565b80845260208401935083602082028501610a8985610d48565b60005b84811015610ac2578383038852610aa4838351610b4e565b9250610aaf82610d76565b9150602088019750600181019050610a8c565b508196508694505050505092915050565b610adc81610da3565b82525050565b6000610aed82610d6b565b808452610b01816020860160208601610dfe565b610b0a81610e31565b602085010191505092915050565b6000610b2382610d6b565b808452610b37816020860160208601610dfe565b610b4081610e31565b602085010191505092915050565b6000610b5982610d60565b808452610b6d816020860160208601610dfe565b610b7681610e31565b602085010191505092915050565b610b8d81610daf565b82525050565b6000602082019050610ba86000830184610a56565b92915050565b60006020820190508181036000830152610bc88184610a65565b905092915050565b6000602082019050610be56000830184610ad3565b92915050565b60006020820190508181036000830152610c058184610ae2565b905092915050565b60006020820190508181036000830152610c278184610b18565b905092915050565b60006040820190508181036000830152610c498185610ae2565b9050610c586020830184610b84565b9392505050565b60006060820190508181036000830152610c798186610ae2565b9050610c886020830185610b84565b610c956040830184610b84565b949350505050565b6000602082019050610cb26000830184610b84565b92915050565b6000606082019050610ccd6000830186610b84565b610cda6020830185610b84565b610ce76040830184610ad3565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715610d1257600080fd5b8060405250919050565b600067ffffffffffffffff821115610d3357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610e1c578082015181840152602081019050610e01565b83811115610e2b576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058205de00b3da1f4a3898ec3a2a2fa1e1271a79c55bf20a61559bd8ba548f1fe6ebd6c6578706572696d656e74616cf50037";

type RegexConstructorParams =
  | [linkLibraryAddresses: RegexLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class Regex__factory extends ContractFactory {
  constructor(...args: RegexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, Regex__factory.linkBytecode(linkLibraryAddresses), signer);
    }
    this.contractName = "Regex";
  }

  static linkBytecode(linkLibraryAddresses: RegexLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__contracts/generated/QueryRegex\\.sol:Q__", "g"),
      linkLibraryAddresses["__contracts/generated/QueryRegex.sol:Q__"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__contracts/FindLibrary\\.sol:FindLibrar__", "g"),
      linkLibraryAddresses["__contracts/FindLibrary.sol:FindLibrar__"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    _utilAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Regex> {
    return super.deploy(_utilAddress, overrides || {}) as Promise<Regex>;
  }
  getDeployTransaction(
    _utilAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_utilAddress, overrides || {});
  }
  attach(address: string): Regex {
    return super.attach(address) as Regex;
  }
  connect(signer: Signer): Regex__factory {
    return super.connect(signer) as Regex__factory;
  }
  static readonly contractName: "Regex";
  public readonly contractName: "Regex";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegexInterface {
    return new utils.Interface(_abi) as RegexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Regex {
    return new Contract(address, _abi, signerOrProvider) as Regex;
  }
}

export interface RegexLibraryAddresses {
  ["__contracts/generated/QueryRegex.sol:Q__"]: string;
  ["__contracts/FindLibrary.sol:FindLibrar__"]: string;
}
