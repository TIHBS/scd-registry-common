/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface UtilInterface extends utils.Interface {
  contractName: "Util";
  functions: {
    "copy(string)": FunctionFragment;
    "split(string,uint256)": FunctionFragment;
    "substring(string,uint256,uint256)": FunctionFragment;
    "tokenize(string,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "copy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "substring",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenize",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "copy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "substring", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenize", data: BytesLike): Result;

  events: {};
}

export interface Util extends BaseContract {
  contractName: "Util";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UtilInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    copy(str: string, overrides?: CallOverrides): Promise<[string]>;

    split(
      _str: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    substring(
      _str: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenize(
      _str: string,
      _delim: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  copy(str: string, overrides?: CallOverrides): Promise<string>;

  split(
    _str: string,
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  substring(
    _str: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenize(
    _str: string,
    _delim: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    copy(str: string, overrides?: CallOverrides): Promise<string>;

    split(
      _str: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    substring(
      _str: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenize(
      _str: string,
      _delim: string,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    copy(str: string, overrides?: CallOverrides): Promise<BigNumber>;

    split(
      _str: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    substring(
      _str: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenize(
      _str: string,
      _delim: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    copy(str: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    split(
      _str: string,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    substring(
      _str: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenize(
      _str: string,
      _delim: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
